/*
/* Copyright 2018-2025 contributors to the OpenLineage project
/* SPDX-License-Identifier: Apache-2.0
*/

plugins {
    id 'eclipse'
    id 'jacoco'
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "com.adarshr.test-logger" version "3.2.0"
    id 'com.diffplug.spotless' version '7.0.2'
    id "com.google.cloud.artifactregistry.gradle-plugin" version "2.2.5"
    id "com.gradleup.shadow" version "8.3.6"
    id "pmd"
    id "io.freefair.lombok" version "8.13.1"
}

pmd {
    consoleOutput = true
    toolVersion = "6.46.0"
    rulesMinimumPriority = 5
    ruleSetFiles = rootProject.files("pmd-openlineage.xml")
    ruleSets = []
    ignoreFailures = false
}

pmdMain {
    reports {
        html.required = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    projectDescription = "GcpLineage OpenLineage transport library"
    assertjVersion = '3.26.3'
    junit5Version = '5.11.4'
    lombokVersion = '1.18.34'
    mockitoVersion = '5.2.0'
    micrometerVersion = '1.14.1'
    isReleaseVersion = !version.endsWith('SNAPSHOT')
    guavaVersion = '33.2.1-jre'
}

dependencies {
    compileOnly(rootProject)
    compileOnly("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    compileOnly("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    compileOnly("org.slf4j:slf4j-api:1.7.36")

    annotationProcessor ("org.projectlombok:lombok:${lombokVersion}")

    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junit5Version}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "com.google.guava:guava:${guavaVersion}"

    implementation "com.google.cloud.datalineage:producerclient:1.1.11" // Java 11
    implementation "com.google.cloud:google-cloud-datalineage:0.60.0"
}

configurations {
    testImplementation.extendsFrom compileOnly
}

compileJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileTestJava {
    options.incremental = true
    options.compilerArgs << '-parameters'
    options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "com.google.cloud.openlineage"
            artifactId = "transports-gcplineage"
            from components.java
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [
                "version": project.property("version")
        ]
    }

    repositories {
        if (isReleaseVersion) {
            maven {
                url = 'artifactregistry://us-central1-maven.pkg.dev/cloud-dataproc-prod/dataproc'
            }
        }
    }
}

jar {
    manifest {
        attributes(
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

shadowJar {
    def packagesToRelocate = [
            'android.annotation',
            'com.google.api',
            'com.google.apps',
            'com.google.auth',
            'com.google.auto',
            'com.google.cloud',
            'com.google.common',
            'com.google.errorprone',
            'com.google.geo',
            'com.google.gson',
            'com.google.iam',
            'com.google.j2objc',
            'com.google.logging',
            'com.google.longrunning',
            'com.google.protobuf',
            'com.google.re2j',
            'com.google.rpc',
            'com.google.shopping',
            'com.google.thirdparty',
            'com.google.type',
            'io.perfmark',

            'javax.annotation',
            'io.grpc',
            'io.opencensus',
            'io.netty',
            'org.conscrypt',

            'org.apache.commons',
            'org.apache.http',
            'org.checkerframework',
            'org.codehaus.mojo',
            'org.threeten',
    ]

    packagesToRelocate.each { packageName ->
        relocate packageName, "io.openlineage.client.shaded.${packageName}"
    }

    relocate 'META-INF/native/libconscrypt_openjdk', 'META-INF/native/libio_openlineage_client_shaded_conscrypt_openjdk'
    relocate 'META-INF/native/conscrypt_openjdk', 'META-INF/native/io_openlineage_client_shaded_conscrypt_openjdk'
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**'
        }
        googleJavaFormat()
        removeUnusedImports()
    }
}

def reportsDir = "${getLayout().getBuildDirectory()}/reports";
def coverageDir = "${reportsDir}/coverage";

jacoco {
    toolVersion = '0.8.12'
    reportsDir = file(coverageDir)
}

jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        html {
            enabled true
            destination = file(coverageDir)
        }
    }
}
